import cv2
import numpy as np

def classify_flag(image_path):
    image = cv2.imread(image_path)
    image = cv2.resize(image, (400, 300))
    blurred = cv2.GaussianBlur(image, (5, 5), 0)

    hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)

    red_lower1 = np.array([0, 70, 50])
    red_upper1 = np.array([10, 255, 255])
    red_lower2 = np.array([160, 70, 50])
    red_upper2 = np.array([180, 255, 255])
    red_mask = cv2.inRange(hsv, red_lower1, red_upper1) | cv2.inRange(hsv, red_lower2, red_upper2)

    white_lower = np.array([0, 0, 200])
    white_upper = np.array([180, 50, 255])
    white_mask = cv2.inRange(hsv, white_lower, white_upper)

    combined_mask = cv2.bitwise_or(red_mask, white_mask)
    contours, _ = cv2.findContours(combined_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    if not contours:
        return "Unable to detect flag region"

    largest_contour = max(contours, key=cv2.contourArea)
    x, y, w, h = cv2.boundingRect(largest_contour)
    flag_roi = image[y:y+h, x:x+w]

    
    flag_roi = cv2.resize(flag_roi, (200, 100))
    flag_hsv = cv2.cvtColor(flag_roi, cv2.COLOR_BGR2HSV)

    top_half = flag_hsv[:50, :]
    bottom_half = flag_hsv[50:, :]

    def red_ratio(region):
        red1 = cv2.inRange(region, red_lower1, red_upper1)
        red2 = cv2.inRange(region, red_lower2, red_upper2)
        return np.sum(red1 | red2) / 255

    def white_ratio(region):
        white = cv2.inRange(region, white_lower, white_upper)
        return np.sum(white) / 255

    top_red = red_ratio(top_half)
    top_white = white_ratio(top_half)
    bottom_red = red_ratio(bottom_half)
    bottom_white = white_ratio(bottom_half)

    if top_red > bottom_red and bottom_white > top_white:
        return "Indonesia"
    elif top_white > bottom_white and bottom_red > top_red:
        return "Poland"
    else:
        return "Unable to classify confidently"


result = classify_flag(r"D:\GANFORGE\poland-2.jpg")
print("Detected Flag is :", result)
